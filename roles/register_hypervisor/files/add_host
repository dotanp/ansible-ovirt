#! /usr/bin/env python

import time
from ovirtsdk.api import API
from ovirtsdk.xml import params


def debug(f):
    def inner(*args, **kwargs):
        import ipdb
        with ipdb.launch_ipdb_on_exception():
            return f(*args, **kwargs)
    return inner


# @debug
def main():
    args = parse_args()
    engine_api = get_api(
        url=args.url,
        user=args.username,
        password=args.password,
        insecure=True
    )

    add_host(engine_api, args.host_name, args.host, args.cluster, args.host_password)
    wait_for_vdsm_host_up(engine_api, args.host_name)


def parse_args():
    import argparse

    parser = argparse.ArgumentParser()

    parser.add_argument('--url', dest='url', required=True,
                        help='the url for the Engine api')
    parser.add_argument('--username', dest='username', required=True,
                        help='the username for the Engine api')
    parser.add_argument('--password', dest='password', required=True,
                        help='the password for the Engine api')
    parser.add_argument('--host', dest='host', required=True,
                        help='the ip address or fqdn of the hypervisor host')
    parser.add_argument('--host-name', dest='host_name', required=False,
                        help='the host logic name')
    parser.add_argument('--host-password', dest='host_password', required=True,
                        help='the root password for the hypervisor')
    parser.add_argument('--cluster', dest='cluster', required=True,
                        help='the name of the cluster to add the hypervisor to')

    args = parser.parse_args()
    if not args.host_name:
        args.host_name = args.host
    return args


def get_api(url=None, user=None, password=None, insecure=False, timeout=30):
    start = time.time()
    while time.time() - start < timeout:
        try:
            return API(
                url=url,
                username=user,
                password=password,
                insecure=insecure
            )
        except Exception:
            time.sleep(10)


def add_host(engine_api, host_name, host, cluster_name, password):
    host_params = params.Host(
        name=host_name,
        address=host,
        cluster=engine_api.clusters.get(cluster_name),
        root_password=password,
        override_iptables=True
    )

    installed_host = (engine_api.hosts.get(name=host_name) or
                      engine_api.hosts.add(host_params))

    return installed_host


def wait_for_vdsm_host_up(engine_api, host_name, retries=600, delay=5):
    for i in range(retries):
        state = None
        try:
            state = engine_api.hosts.get(host_name).status.state
        except Exception as e:
            print 'Error fetching host state: {}'.format(e)
        else:
            print 'VDSM host in {state} state'.format(state=state)
            if 'failed' in state:
                raise Exception('The VDSM host was found in a failed state. Please check engine and bootstrap installation logs.')
            elif state == 'up':
                print 'The VDSM Host is now operational'
                return True

        if i % 30 == 0:
            print('Waiting for VDSM host to become operational...')
        time.sleep(delay)

    raise Exception('Timed out while waiting for host to start. Please check the logs.')


if __name__ == '__main__':
    main()
