#! /usr/bin/env python

import time

import ovirtsdk4 as sdk
import ovirtsdk4.types as types


def debug(f):
    def inner(*args, **kwargs):
        import ipdb
        with ipdb.launch_ipdb_on_exception():
            return f(*args, **kwargs)
    return inner


# @debug
def main():
    args = parse_args()
    con = get_connection(
            url=args.url,
            user=args.username,
            password=args.password,
            insecure=True
    )
    hosts_service = con.system_service().hosts_service()

    host = add_host(hosts_service, args.host_name, args.host, args.cluster,
                    args.host_password, args.deploy_hosted_engine)
    wait_for_vdsm_host_up(hosts_service, host)

    # Close the connection to the server:
    con.close()


def parse_args():
    import argparse

    parser = argparse.ArgumentParser()

    parser.add_argument('--url', dest='url', required=True,
                        help='the url for the Engine api')
    parser.add_argument('--username', dest='username', required=True,
                        help='the username for the Engine api')
    parser.add_argument('--password', dest='password', required=True,
                        help='the password for the Engine api')
    parser.add_argument('--host', dest='host', required=True,
                        help='the ip address or fqdn of the hypervisor host')
    parser.add_argument('--host-name', dest='host_name', required=False,
                        help='the host logic name')
    parser.add_argument('--host-password', dest='host_password', required=True,
                        help='the root password for the hypervisor')
    parser.add_argument('--cluster', dest='cluster', required=True,
                        help='the name of the cluster to add the hypervisor to')
    parser.add_argument('--deploy-hosted-engine', dest='deploy_hosted_engine',
                        required=False, action='store_true', default=False,
                        help='to install the host with HE capabilities')

    args = parser.parse_args()
    if not args.host_name:
        args.host_name = args.host
    return args


def get_connection(url=None, user=None, password=None, insecure=False, timeout=30):
    start = time.time()
    while time.time() - start < timeout:
        try:
            return sdk.Connection(
                    url=url,
                    username=user,
                    password=password,
                    insecure=insecure
            )
        except Exception:
            time.sleep(10)


def add_host(hosts_service, host_name, host, cluster_name, password, deploy_hosted_engine=False):
    search_str = 'name={0}'.format(host_name)
    host_obj = hosts_service.list(search=search_str)
    if host_obj:
        print('The host {0} already exist'.format(host_name))
        return host_obj[0]
    installed_host = hosts_service.add(
            types.Host(
                    name=host_name,
                    description=host,
                    address=host,
                    root_password=password,
                    cluster=types.Cluster(
                            name=cluster_name,
                    ),
            ), deploy_hosted_engine=deploy_hosted_engine
    )

    return installed_host


def wait_for_vdsm_host_up(hosts_service, host, retries=600, delay=5):

    host_service = hosts_service.host_service(host.id)
    while True and retries > 0:
        host = host_service.get()
        print('Waiting for VDSM host to become operational...')
        if host.status == types.HostStatus.UP:
            print 'The VDSM Host is now operational'
            return True
        time.sleep(delay)
        retries -= 1
    raise Exception('Timed out while waiting for host to start. Please check the logs.')


if __name__ == '__main__':
    main()
