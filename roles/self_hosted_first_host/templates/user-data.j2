#cloud-config
# vim: syntax=yaml

disable_root: false
ssh_pwauth: true

chpasswd:
  list: |
    root:{{ root_password }}
  expire: False

write_files:
 - content: |
     [environment:init]
     DIALOG/autoAcceptDefault=bool:True
     [environment:default]
     OVESETUP_CONFIG/adminPassword=str:{{ admin_password }}
     OVESETUP_CONFIG/fqdn=str:{{ engine_fqdn }}
     OVESETUP_PKI/organization=str:{{ engine_organization }}
     OVESETUP_DB/host=str:{{ engine_db_host }}
     OVESETUP_DB/user=str:{{ engine_db_user }}
     OVESETUP_DB/password=str:{{ engine_db_password }}
     OVESETUP_DB/port=int:{{ engine_db_port }}
     OVESETUP_CONFIG/applicationMode=str:{{ engine_application_mode }}
     OVESETUP_CONFIG/storageType=str:{{ storage_type }}
     OVESETUP_DWH_CORE/enable=bool:True
     OVESETUP_DWH_DB/host=str:{{ engine_db_host }}
     OVESETUP_DWH_DB/password=str:{{ engine_db_password }}
     OVESETUP_DWH_DB/port=int:{{ engine_db_port }}
     OVESETUP_REPORTS_CORE/enable=bool:True
     OVESETUP_REPORTS_CONFIG/adminPassword=str:{{ admin_password }}
     OVESETUP_REPORTS_DB/host=str:{{ engine_db_host }}
     OVESETUP_REPORTS_DB/password=str:{{ engine_db_password }}
     OVESETUP_REPORTS_DB/port=int:{{ engine_db_port }}
   path: /root/answers
   owner: root:root
   permissions: '0640'

{% if ansible_distribution == 'Red Hat Enterprise Linux' %}
 - content: |
     if  ! grep -q "^PermitRootLogin yes" /etc/ssh/sshd_config ; then
       sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin yes/' /etc/ssh/sshd_config
       /sbin/service sshd restart
     fi

     if ! grep -q "^PasswordAuthentication yes" /etc/ssh/sshd_config ; then
       sed -i -e '/^PasswordAuthentication/s/^.*$/PasswordAuthentication yes/' /etc/ssh/sshd_config
       /sbin/service sshd restart
     fi
   path: /root/fix_ssh.sh
   permissions: '0755'
{% endif %}

runcmd:
{% if ansible_distribution == 'Red Hat Enterprise Linux' %}
 - echo "Enabling ssh access" 1>/dev/virtio-ports/org.ovirt.hosted-engine-setup.0 2>&1
 - bash -e /root/fix_ssh.sh 1>/dev/virtio-ports/org.ovirt.hosted-engine-setup.0 2>&1
 - sed -i -e '$aAllowUsers root'
 - rpm -ivh http://{{ satellite_fqdn }}/pub/katello-ca-consumer-latest.noarch.rpm 1>/dev/virtio-ports/org.ovirt.hosted-engine-setup.0 2>&1
 - echo "Registering the System" 1>/dev/virtio-ports/org.ovirt.hosted-engine-setup.0 2>&1
 - subscription-manager register --org="Default_Organization" --name="{{ engine_fqdn }}" --activationkey="{{ engine_activation_key }}" 1>/dev/virtio-ports/org.ovirt.hosted-engine-setup.0 2>&1
 - echo "Enabling repositories" 1>/dev/virtio-ports/org.ovirt.hosted-engine-setup.0 2>&1
 - subscription-manager repos --disable "*" 1>/dev/virtio-ports/org.ovirt.hosted-engine-setup.0 2>&1
 - subscription-manager repos --enable {{ engine_repositories | join(' --enable ') }} %> 1>/dev/virtio-ports/org.ovirt.hosted-engine-setup.0 2>&1
{% endif %}
 - echo "Running engine setup" 1>/dev/virtio-ports/org.ovirt.hosted-engine-setup.0 2>&1
 - /usr/bin/engine-setup --offline --config-append=/root/answers 1>/dev/virtio-ports/org.ovirt.hosted-engine-setup.0 2>&1
 - if [ $? -eq 0 ]; then echo "HE_APPLIANCE_ENGINE_SETUP_SUCCESS" >/dev/virtio-ports/org.ovirt.hosted-engine-setup.0; else echo "HE_APPLIANCE_ENGINE_SETUP_FAIL" >/dev/virtio-ports/org.ovirt.hosted-engine-setup.0; fi
 - systemctl mask cloud-init-local ||  chkconfig cloud-init-local off
 - systemctl mask cloud-init || ( chkconfig cloud-init off && chkconfig cloud-config off && chkconfig cloud-final off )
 - echo "Installing additional packages"
 - yum -y install python-enum34
{% if ansible_distribution == 'Red Hat Enterprise Linux' %}
 - yum -y install katello-agent
{% endif %}
 - yum -y update
 - echo "Configuration complete"
